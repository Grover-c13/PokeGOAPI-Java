/*
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.pokegoapi.util.hash.crypto;

import java.security.InvalidKeyException;

public class Crypto {
	private static final byte[] KEY = new byte[]{
			(byte) 0x4F, (byte) 0xEB, (byte) 0x1C, (byte) 0xA5, (byte) 0xF6, (byte) 0x1A, (byte) 0x67, (byte) 0xCE,
			(byte) 0x43, (byte) 0xF3, (byte) 0xF0, (byte) 0x0C, (byte) 0xB1, (byte) 0x23, (byte) 0x88, (byte) 0x35,
			(byte) 0xE9, (byte) 0x8B, (byte) 0xE8, (byte) 0x39, (byte) 0xD8, (byte) 0x89, (byte) 0x8F, (byte) 0x5A,
			(byte) 0x3B, (byte) 0x51, (byte) 0x2E, (byte) 0xA9, (byte) 0x47, (byte) 0x38, (byte) 0xC4, (byte) 0x14
	};

	private static final int[] XBOX = new int[]{
			0x01,
			0x00,
			0x83, 0x57, 0x47, 0x28, 0x1C, 0x84, 0x5C, 0xF0,
			0x25, 0xCC, 0x14, 0xD1, 0xE4, 0xE0, 0x4B, 0x4C,
			0x68, 0x20, 0x72, 0x37, 0x34, 0x7B, 0x23, 0xF3,
			0x7D, 0x62, 0x8C, 0xA7, 0xE2, 0xA8, 0x88, 0x6E,
			0x27, 0x74, 0x3E, 0x94, 0x2A, 0x6D, 0x3B, 0xA5,
			0x7A, 0x41, 0xA3, 0x13, 0x8B, 0x31, 0x42, 0x09,
			0xB4, 0x16, 0x2F, 0xB7, 0x06, 0x04, 0x75, 0x39,
			0x67, 0xC0, 0x30, 0xDE, 0xA4, 0xF8, 0xD8, 0x19,
			0xF7, 0xF9, 0x2D, 0xAE, 0xC2, 0xE9, 0xCB, 0xC1,
			0x1B, 0x5E, 0xC3, 0x08, 0xAA, 0x4F, 0xD4, 0xBF,
			0x35, 0x63, 0x2E, 0x8F, 0x9F, 0x0F, 0x8A, 0x97,
			0xB8, 0x3A, 0xA6, 0x48, 0x98, 0x11, 0x71, 0x89,
			0x6C, 0x9B, 0x0A, 0x61, 0xA9, 0x86, 0x22, 0xE3,
			0x03, 0x7F, 0x4A, 0x99, 0x00, 0xAB, 0xED, 0xF2,
			0x9A, 0xBA, 0x52, 0x29, 0x1E, 0xBE, 0xFC, 0xA0,
			0x65, 0x6A, 0x78, 0xCA, 0x69, 0xD0, 0x21, 0x49,
			0xBD, 0x4D, 0x2C, 0x7E, 0x53, 0xB5, 0xE6, 0xDC,
			0x60, 0x8E, 0xFD, 0x17, 0x82, 0x0E, 0x9C, 0x4E,
			0xAF, 0xC5, 0xC4, 0x5D, 0x81, 0xF4, 0x02, 0x5B,
			0x0B, 0x50, 0xAC, 0x45, 0x95, 0x5F, 0x38, 0xD3,
			0x76, 0xC7, 0x07, 0x90, 0x92, 0x79, 0x15, 0x77,
			0xDB, 0x12, 0x3D, 0xBC, 0x10, 0x1A, 0x51, 0xB9,
			0x32, 0xBB, 0x26, 0x56, 0xDD, 0xD9, 0xE5, 0x7C,
			0xE8, 0xE7, 0xAD, 0xD2, 0xF6, 0xEE, 0xCF, 0xFE,
			0x87, 0x66, 0x64, 0xF5, 0xCD, 0xE1, 0xC9, 0xFA,
			0x0C, 0x01, 0x6B, 0x3F, 0x0D, 0xDA, 0x96, 0x40,
			0xA2, 0x1F, 0x5A, 0x24, 0xEB, 0x59, 0xEC, 0x44,
			0x43, 0x91, 0xB0, 0xB2, 0xD7, 0x54, 0x2B, 0xCE,
			0x33, 0xFF, 0x58, 0x18, 0x93, 0x46, 0xC8, 0xDF,
			0x3C, 0xFB, 0x8D, 0xB1, 0x55, 0xD5, 0x6F, 0x70,
			0xEF, 0x9D, 0xA1, 0x9E, 0xB6, 0xEA, 0xC6, 0xF1,
			0x80, 0x1D, 0x05, 0x73, 0xD6, 0xB3, 0x36, 0x85
	};

	protected static class Rand {
		private long state;

		private Rand(long state) {
			this.state = state;
		}

		public char next() {
			state = (state * 0x41C64E6D) + 0x3039;
			return (char) ((state >> 16) & 0x7FFF);
		}
	}

	protected byte[] makeIv(Rand rand) {
		byte[] iv = new byte[TwoFish.BLOCK_SIZE];
		for (int i = 0; i < iv.length; i++) {
			iv[i] = (byte) rand.next();
		}
		return iv;
	}

	protected byte makeIntegrityByte(Rand rand) {
		return 0x23;
	}

	/**
	 * Encrypts the given signature
	 *
	 * @param input input data
	 * @param msSinceStart time since start
	 * @return encrypted signature
	 */
	public byte[] encrypt(byte[] input, long msSinceStart) {
		try {
			Object key = TwoFish.makeKey(KEY);

			Rand rand = new Rand(msSinceStart);
			byte[] iv = this.makeIv(rand);
			int blockCount = (input.length + 256) / 256;
			int outputSize = (blockCount * 256) + 5;
			byte[] output = new byte[outputSize];

			output[0] = (byte) (msSinceStart >> 24);
			output[1] = (byte) (msSinceStart >> 16);
			output[2] = (byte) (msSinceStart >> 8);
			output[3] = (byte) msSinceStart;

			System.arraycopy(input, 0, output, 4, input.length);
			output[outputSize - 2] = (byte) (256 - input.length % 256);

			for (int offset = 0; offset < blockCount * 256; offset += TwoFish.BLOCK_SIZE) {
				for (int i = 0; i < TwoFish.BLOCK_SIZE; i++) {
					output[4 + offset + i] ^= iv[i];
				}

				byte[] block = TwoFish.blockEncrypt(output, offset + 4, key);
				System.arraycopy(block, 0, output, offset + 4, block.length);
				System.arraycopy(output, 4 + offset, iv, 0, TwoFish.BLOCK_SIZE);
			}

			output[outputSize - 1] = this.makeIntegrityByte(rand);
			encryptCipher(output, outputSize);

			return output;
		} catch (InvalidKeyException e) {
			return null;
		}
	}

	private void encryptCipher(byte[] output, int size) {
		int[] newXBox = new int[XBOX.length];
		System.arraycopy(XBOX, 0, newXBox, 0, XBOX.length);
		int a4 = size - 1;
		int srci = 0;
		int v4 = newXBox[0];
		int v5 = newXBox[1];
		for (; a4 != 0; v4 = (v4 + 1) & 0xFF) {
			--a4;
			int v7 = newXBox[2 + v4];
			v5 = (v5 + v7) & 0xFF;
			int v9 = newXBox[2 + v5];
			newXBox[2 + v4] = v9;
			newXBox[2 + v5] = v7;
			int v10 = (v9 + v7) & 0xFF;
			output[srci++] ^= newXBox[2 + v10] & 0xFF;
		}
	}
}